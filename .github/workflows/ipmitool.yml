name: IPMItool Tests

# START OF COMMON SECTION
on:
  push:
    branches: [ 'master', 'main', 'build-wolfprov-debian-test', 'release/**' ]
  pull_request:
    branches: [ '*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# END OF COMMON SECTION

jobs:
  test_ipmitool:
    runs-on: ubuntu-22.04
    container:
      image: debian:bookworm
      env:
        DEBIAN_FRONTEND: noninteractive
    # This should be a safe limit for the tests to run.
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        ipmitool_ref: [ 'IPMITOOL_1_8_19' ]
        wolfssl_ref: [ 'v5.8.2-stable' ]
        openssl_ref: [ 'openssl-3.5.2' ]
        fips_ref: [ 'FIPS', 'non-FIPS' ]
        force_fail: [ 'WOLFPROV_FORCE_FAIL=1', '' ]
        replace_default: [ true ]
    env:
      WOLFSSL_PACKAGES_PATH: /tmp/wolfssl-packages
      OPENSSL_PACKAGES_PATH: /tmp/openssl-packages
      WOLFPROV_PACKAGES_PATH: /tmp/wolfprov-packages
    steps:
      - name: Checkout wolfProvider
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download wolfProvider packages from nightly build
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: build-wolfprovider-nightly.yml
          branch: ${{ github.ref_name }}
          name: debian-packages-${{ matrix.fips_ref }}${{ matrix.replace_default && '-replace-default' || '' }}-${{ matrix.wolfssl_ref }}-${{ matrix.openssl_ref }}
          path: /tmp/packages

      - name: Setup package directories
        run: |
          mv /tmp/packages/wolfssl-packages ${{ env.WOLFSSL_PACKAGES_PATH }}
          mv /tmp/packages/openssl-packages ${{ env.OPENSSL_PACKAGES_PATH }}
          mv /tmp/packages/wolfprov-packages ${{ env.WOLFPROV_PACKAGES_PATH }}

      - name: Install wolfSSL/OpenSSL/wolfprov packages
        run: |
          printf "Installing OpenSSL/wolfProvider packages (${{ matrix.fips_ref }}):\n"
          ls -la ${{ env.WOLFSSL_PACKAGES_PATH }}
          ls -la ${{ env.OPENSSL_PACKAGES_PATH }}
          ls -la ${{ env.WOLFPROV_PACKAGES_PATH }}

          apt install --reinstall -y \
            ${{ env.WOLFSSL_PACKAGES_PATH }}/*.deb

          apt install --reinstall -y \
            ${{ env.OPENSSL_PACKAGES_PATH }}/openssl_*.deb \
            ${{ env.OPENSSL_PACKAGES_PATH }}/libssl3_*.deb \
            ${{ env.OPENSSL_PACKAGES_PATH }}/libssl-dev_*.deb

          apt install --reinstall -y \
            ${{ env.WOLFPROV_PACKAGES_PATH }}/*.deb

      - name: Verify wolfProvider is properly installed
        run: |
          $GITHUB_WORKSPACE/scripts/verify-install.sh \
            ${{ matrix.replace_default && '--replace-default' || '' }} \
            ${{ matrix.fips_ref == 'FIPS' && '--fips' || '' }}

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y libreadline-dev build-essential autoconf \
            automake libtool pkg-config autoconf-archive wget

      - name: Build ipmitool with wolfProvider
        uses: wolfSSL/actions-build-autotools-project@v1
        with:
          repository: ipmitool/ipmitool
          ref: ${{ matrix.ipmitool_ref }}
          path: ipmitool
          check: false

      - name: Test ipmitool crypto functionality
        working-directory: ipmitool
        shell: bash
        run: |
          set +o pipefail # allow force_fail to work

          # Run version check
          ./src/ipmitool -V

          # Test crypto operations using ipmitool's built-in crypto functions
          # ipmitool uses OpenSSL for RAKP (Remote Authenticated Key-exchange Protocol)
          # and other cryptographic operations
          echo "Testing ipmitool crypto operations via help system (exercises crypto init)..."

          export ${{ matrix.force_fail }}

          # Test various commands that initialize crypto subsystem
          # Even without actual IPMI hardware, these commands will initialize the provider
          ./src/ipmitool -I lan help 2>&1 | tee ipmitool-test.log
          TEST_RESULT=${PIPESTATUS[0]}

          # The help command should succeed and show available commands
          if [ $TEST_RESULT -eq 0 ]; then
            echo "SUCCESS: ipmitool help executed (crypto subsystem initialized)"
          else
            echo "FAILURE: ipmitool help failed"
          fi

          $GITHUB_WORKSPACE/.github/scripts/check-workflow-result.sh $TEST_RESULT ${{ matrix.force_fail }} ipmitool
