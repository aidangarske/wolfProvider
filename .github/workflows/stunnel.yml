name: Stunnel Tests

# START OF COMMON SECTION
on:
  push:
    branches: [ 'master', 'main', 'release/**' ]
  #pull_request:
    #branches: [ '*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# END OF COMMON SECTION

jobs:
  build_wolfprovider:
    uses: ./.github/workflows/build-wolfprovider.yml
    with:
      wolfssl_ref: ${{ matrix.wolfssl_ref }}
      openssl_ref: ${{ matrix.openssl_ref }}
    strategy:
      matrix:
        wolfssl_ref: [ 'v5.8.2-stable' ]
        openssl_ref: [ 'openssl-3.5.0' ]

  test_stunnel:
    runs-on: ubuntu-22.04
    needs: build_wolfprovider
    # This should be a safe limit for the tests to run.
    timeout-minutes: 10
    container:
      image: debian:bookworm
      env:
        DEBIAN_FRONTEND: noninteractive
    strategy:
      matrix:
        stunnel_ref: [ 'stunnel-5.67' ]
        wolfssl_ref: [ 'v5.8.2-stable' ]
        openssl_ref: [ 'openssl-3.5.0' ]
        force_fail: ['WOLFPROV_FORCE_FAIL=1', '']
    steps:
      - name: Set up environment
        run: |
          apt-get update
          apt-get install -y git sudo build-essential autoconf automake \
            libtool pkg-config libjansson-dev check ca-certificates dpkg-dev \
            libwrap0-dev autoconf-archive autotools-dev m4

      - name: Checkout wolfProvider
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download wolfSSL packages
        uses: actions/download-artifact@v4
        with:
          name: wolfssl-debian-packages-${{ github.sha }}
          path: /tmp/wolfssl-artifacts

      - name: Download OpenSSL/wolfProvider packages
        uses: actions/download-artifact@v4
        with:
          name: openssl-wolfprov-debian-packages-${{ github.sha }}
          path: /tmp/openssl-wolfprov-artifacts

      - name: Install wolfSSL/OpenSSL/wolfprov packages
        run: |
          $GITHUB_WORKSPACE/.github/scripts/install-packages.sh

      - name: Check Python version
        run: python --version

      - name: Checkout Stunnel
        uses: actions/checkout@v4
        with:
          repository: mtrojnar/stunnel
          ref: ${{ matrix.stunnel_ref }}
          path: stunnel
          fetch-depth: 1

      - name: Checkout OSP
        uses: actions/checkout@v4
        with:
          repository: wolfssl/osp
          path: osp
          fetch-depth: 1
      - run: |
          cd stunnel
          patch -p1 < $GITHUB_WORKSPACE/osp/wolfProvider/stunnel/stunnel-${{ matrix.stunnel_ref }}-wolfprov.patch

      - name: Build Stunnel
        working-directory: ./stunnel
        run: |
          autoreconf -ivf
          ./configure
          make -j

      - name: Update python cryptography module
        working-directory: ./stunnel
        run: |
          python3 -m venv myenv
          source myenv/bin/activate
          pip install cryptography  # will use your OpenSSL if built from source

      - name: Verify stunnel with wolfProvider
        working-directory: ./stunnel
        shell: bash
        run: |
          # wolfProvider is already loaded as the default provider
          echo "Current OpenSSL providers:"
          openssl list -providers
          openssl list -providers | grep -q "wolfSSL Provider" || (echo "ERROR: libwolfprov not found in OpenSSL providers" && exit 1)
          export ${{ matrix.force_fail }}
          if [ -n "${{ matrix.force_fail }}" ]; then
            set +e
          fi

          # enter venv
          source myenv/bin/activate

          # Set this variable to prevent attempts to load the legacy OpenSSL 
          # provider, which we don't support.
          # This is necessary for OpenSSL 3.0+ to avoid errors related to legacy
          # algorithms that are not supported by wolfProvider.
          export CRYPTOGRAPHY_OPENSSL_NO_LEGACY=1

          # Verify stunnel
          ldd src/stunnel
          ldd src/stunnel | grep -E '(libssl|libcrypto)' | grep wolfProvider
          ./src/stunnel -version

          # Run tests
          # Results captured in tests/logs/results.log
          # Use `timeout` since the tests hang with WOLFPROV_FORCE_FAIL=1
          timeout 10 make check 2>&1 || true

          # grep for "failed: 0" in the results log, indicating success
          TEST_RESULT=$(grep -c "failed: 0" tests/logs/results.log || echo 1)
          echo "Test result: $TEST_RESULT"

          $GITHUB_WORKSPACE/.github/scripts/check-workflow-result.sh $TEST_RESULT ${{ matrix.force_fail }} stunnel
