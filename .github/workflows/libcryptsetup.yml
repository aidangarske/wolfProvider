name: Libcryptsetup Tests

# START OF COMMON SECTION
on:
  push:
    branches: [ 'master', 'main', 'release/**' ]
  pull_request:
    branches: [ '*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# END OF COMMON SECTION

jobs:
  build_wolfprovider:
    uses: ./.github/workflows/build-wolfprovider.yml
    with:
      wolfssl_ref: ${{ matrix.wolfssl_ref }}
      openssl_ref: ${{ matrix.openssl_ref }}
    strategy:
      matrix:
        # Test 5.8.2 since our .deb is based on that version
        wolfssl_ref: [ 'v5.8.2-stable' ]
        openssl_ref: [ 'openssl-3.5.0' ]

  test_cryptsetup:
    runs-on: ubuntu-22.04
    needs: build_wolfprovider
    # This should be a safe limit for the tests to run.
    timeout-minutes: 20
    container:
      image: debian:bookworm
      env:
        DEBIAN_FRONTEND: noninteractive
    strategy:
      fail-fast: false
      matrix:
        # Dont test master since it might be too unstable
        cryptsetup_ref: [ 'v2.6.1' ]
        wolfssl_ref: [ 'v5.8.2-stable' ]
        openssl_ref: [ 'openssl-3.5.0' ]
        force_fail: [ 'WOLFPROV_FORCE_FAIL=1', '' ]

    steps:
      - name: Set up environment
        run: |
          apt-get update
          apt-get install -y git sudo build-essential autoconf automake \
            libtool pkg-config libjansson-dev check ca-certificates dpkg-dev

      - name: Checkout wolfProvider
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download wolfSSL packages
        uses: actions/download-artifact@v4
        with:
          name: wolfssl-debian-packages-${{ github.sha }}
          path: /tmp/wolfssl-artifacts

      - name: Download OpenSSL/wolfProvider packages
        uses: actions/download-artifact@v4
        with:
          name: openssl-wolfprov-debian-packages-${{ github.sha }}
          path: /tmp/openssl-wolfprov-artifacts

      - name: Install wolfSSL/OpenSSL/wolfprov packages
        run: |
          $GITHUB_WORKSPACE/.github/scripts/install-packages.sh

      - name: Install dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y \
            build-essential autoconf asciidoctor gettext autopoint libtool \
            pkg-config uuid-dev libdevmapper-dev libpopt-dev libjson-c-dev \
            libblkid-dev libargon2-dev

      - name: Checkout cryptsetup
        uses: actions/checkout@v4
        with:
          repository: mbroz/cryptsetup
          path: cryptsetup
          ref: ${{ matrix.cryptsetup_ref }}

      - name: Checkout OSP
        uses: actions/checkout@v4
        with:
          repository: wolfssl/osp
          path: osp
          fetch-depth: 1
      - run: |
          cd cryptsetup
          patch -p1 < $GITHUB_WORKSPACE/osp/wolfProvider/libcryptsetup/libcryptsetup-${{ matrix.cryptsetup_ref }}-wolfprov.patch

      - name: Build cryptsetup
        working-directory: cryptsetup
        run: |
          ./autogen.sh
          ./configure --enable-static \
            --with-crypto-backend=openssl \
            --disable-ssh-token
          make -j$(nproc)

      - name: Run cryptsetup tests
        working-directory: cryptsetup
        shell: bash
        run: |
          # wolfProvider is already loaded as the default provider
          echo "Current OpenSSL providers:"
          openssl list -providers
          openssl list -providers | grep -q "wolfSSL Provider" || (echo "ERROR: libwolfprov not found in OpenSSL providers" && exit 1)
          
          # Set OpenSSL configuration to use wolfProvider
          export OPENSSL_CONF=/etc/ssl/openssl.cnf
          export OPENSSL_MODULES=/usr/lib/x86_64-linux-gnu/ossl-modules
          
          # Test OpenSSL functionality
          echo "Testing OpenSSL with wolfProvider:"
          openssl enc -aes-256-cbc -e -in /dev/null -out /dev/null -pass pass:test 2>&1 || echo "AES-256-CBC test failed"
          openssl enc -aes-256-xts -e -in /dev/null -out /dev/null -pass pass:test 2>&1 || echo "AES-256-XTS test failed"
          
          export ${{ matrix.force_fail }}
          if [ -n "${{ matrix.force_fail }}" ]; then
            set +e
          fi

          # Run the tests and capture the result
          make check 2>&1 | tee cryptsetup-test.log
          TEST_RESULT=$(grep -q "Cannot initialize crypto backend" cryptsetup-test.log && echo "1" || echo "0")
          $GITHUB_WORKSPACE/.github/scripts/check-workflow-result.sh $TEST_RESULT ${{ matrix.force_fail }} cryptsetup
